#! /usr/bin/env ruby

require "rbi-central"

module RBICentral
  class StaticValidator < RBIValidator
    def validate_file!
      log("Checking static for `#{@gem_name}`...")

      index_entry = @repo_index[@gem_name]
      unless index_entry
        error("No index entry for `#{@gem_name}`")
        return false
      end

      context = StaticContext.new(@rbi_file, @gem_name)

      deps = index_entry["dependencies"]
      deps&.each do |dep_name|
        context.add_gem_dependency(dep_name)
      end

      requires = index_entry["requires"] || [@gem_name]
      requires.each do |require_name|
        context.add_require(require_name)
      end

      context.run!
    end

    class StaticContext < Context
      def initialize(repo_index, file)
        super

        @requires = String.new
      end

      def run!
        add_gem_dependency("sorbet", version: ">= 0.5.10109")
        add_gem_dependency("tapioca", github: "Shopify/tapioca", ref: "8ce7951f69aa41ce9ff4990b67f0c3c9d64c0a6f")
        add_gem_dependency(@gem_name)

        return false unless super

        write_require_rb!

        out, status = exec!("bundle exec tapioca gem --no-doc --post #{@workdir}/requires.rb")
        unless status.success?
          $stderr.puts("\n#{out}")
          return false
        end

        write_annotation_file!

        success = true
        out, status = exec!("bundle exec tapioca check-shims --no-payload " \
                              "--gem-rbi-dir=#{@workdir}/sorbet/rbi/gems " \
                              "--shim-rbi-dir=#{@workdir}/rbi/annotations " \
                              "--annotations-rbi-dir=#{@workdir}/sorbet/rbi/none")
        unless status.success?
          out.gsub!("#{@workdir}/", "")
          out.gsub!("rbi/annotations and sorbet/rbi/todo.rbi", @rbi_file.yellow)

          out.lines do |line|
            line.strip!
            next if line.end_with?("...  Done")

            if line.start_with?("Duplicated RBI")
              error(line.strip)
            elsif line.start_with?("* ")
              $stderr.puts(line.strip.yellow)
            else
              $stderr.puts(line.strip)
            end
          end

          success = false
        end

        out, status = exec!("bundle exec srb tc . --no-error-sections --color=always --ignore vendor/bundle --no-config --no-error-count")
        unless status.success?
          $stderr.puts("\n#{out}")
          success = false
        end

        success
      ensure
        destroy!
      end

      def add_require(name)
        @requires << <<~RB
          require "#{name}"
        RB
      end

      private

      def write_require_rb!
        File.write("#{@workdir}/requires.rb", @requires)
      end

      def write_annotation_file!
        FileUtils.mkdir_p("#{@workdir}/rbi/annotations")
        FileUtils.cp(@rbi_file, "#{@workdir}/#{@rbi_file}")
      end
    end
  end
end

RBICentral::StaticValidator.validate_files!(RBICentral.load_index, RBICentral.rbi_files)
